import logging
from telegram import Update, LabeledPrice
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    PreCheckoutQueryHandler
)
from telegram import ReplyKeyboardMarkup
import datetime
import asyncio
import aiosqlite

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

MIDLE_OPTION, CHOOSE_OPTION = range(1, 3)

PAYMENT_PROVIDER_TOKEN = "390540012:LIVE:47983"

async def create_bd(loop):
    async with aiosqlite.connect('db.sqlite3', loop=loop) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS clients(
                            id INTEGER PRIMARY KEY,
                            status INTEGER,
                            day INTEGER);""")
        await db.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_board = [["–ñ–µ—Ä—Ç–≤–∞","–°–ø–∞—Å–∞—Ç–µ–ª—å","–ê–≥—Ä–µ—Å—Å–æ—Ä"]]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"""üéÅ –ß–µ–∫-–ª–∏—Å—Ç –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –ª–∏—á–Ω–æ–π —Ä–æ–ª–∏ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤ –ø–æ–¥–∞—Ä–æ–∫ üéÅ

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.full_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò—Ä–∏–Ω–∞ –ö–æ–ø—ã–ª–æ–≤–∞. –Ø –ø—Å–∏—Ö–æ–ª–æ–≥, –∏–≥—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫, –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç.  ‚òòÔ∏è

–ö–∞–∫ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π, —è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞–º –≤–∞–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–æ–±–æ–π –∏ –Ω–µ –≤–æ–≤–ª–µ–∫–∞—Ç—å—Å—è –≤ —Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –∫ —Å–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Ä–∞–∑—Ä—É—à–µ–Ω–∏—é –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ç–µ—Ä–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏. üå∏

–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ö–∞—Ä–ø–º–∞–Ω–∞ ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –±—ã–ª–∞ –Ω–∞–∑–≤–∞–Ω–∞ —Ä–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –±—ã—Ç—å —Å–æ–±–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—è–≤–ª—è—Ç—å —Å–µ–±—è –≤ —ç—Ç–æ–º –º–∏—Ä–µ.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞–ª–∞ –ø–æ–Ω—è—Ç–Ω–∞ –≤–∞—à–∞ —Ä–æ–ª—å –≤ —ç—Ç–∏—Ö –∏–≥—Ä–∞—Ö –º–µ–∂–¥—É –ª—é–¥—å–º–∏, —è —Å–æ–∑–¥–∞–ª–∞ —á–µ–∫-–ª–∏—Å—Ç—ã, –ø–æ–º–æ–≥–∞—é—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –Ø –¥–∞—Ä—é –∏—Ö –≤–∞–º. üéÅ 

–ß–µ–∫-–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ —Å–µ–±—è –∫ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Ä–æ–ª–∏. 

–û–Ω–∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç, –ø–æ—á–µ–º—É –ª—é–¥–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫—É—é —Ä–æ–ª—å –∏ –∫–∞–∫ –ª–µ–≥–∫–æ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–¥–æ–±–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. üëå

–ù–µ –≤–∞–∂–Ω–æ, –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ. –í–∞–∂–Ω–æ, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞.

–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç —Å–≤–æ—é —Ü–µ–ª—å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. 

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–æ–π —Ä–æ–ª—å—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–µ–±—è –≤–∏–¥–∏—Ç–µ.

‚è≥ –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ¬´–Ω–∞ –ø–æ—Ç–æ–º¬ª, –≤–µ–¥—å —á–µ–∫-–ª–∏—Å—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ 48 —á–∞—Å–æ–≤!

–ü–æ–µ—Ö–∞–ª–∏ ‚¨áÔ∏è""",
        reply_markup=ReplyKeyboardMarkup(
            reply_board,
            resize_keyboard=True,
        ),
    )
    async with aiosqlite.connect('db.sqlite3') as db:
        async with db.execute('''SELECT id FROM clients WHERE id = ?''', (update.effective_user.id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return CHOOSE_OPTION
            else:
                await db.execute('''INSERT INTO clients (id) VALUES (?)''', (update.effective_user.id,))
                await db.commit()
                return CHOOSE_OPTION


async def choose_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_message.text == "–ñ–µ—Ä—Ç–≤–∞":
        await progrev_func_gaidj(update, context)
        return
    
    if update.effective_message.text == "–°–ø–∞—Å–∞—Ç–µ–ª—å":
        await progrev_func_gaids(update, context)
        return
    
    if update.effective_message.text == "–ê–≥—Ä–µ—Å—Å–æ—Ä":
        return await progrev_func_gaida(update, context)
    
    if update.effective_message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å!":
        async with aiosqlite.connect('db.sqlite3') as db:
            await db.execute('''UPDATE clients SET status = ? WHERE id = ?''', (1, update.effective_user.id))
            await db.commit()
         
        return await payment_gaid(update, context)
    
    if update.effective_message.text == "–Ø –µ—â—ë –Ω–µ —Å–æ–∑—Ä–µ–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è":
        time_delta = datetime.timedelta(seconds=5)
        context.job_queue.run_once(progrev_after_gaid, time_delta, chat_id=update.effective_user.id, data=update)

    if update.effective_message.text == "–Ø –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ":
        time_delta = datetime.timedelta(seconds=5)
        context.job_queue.run_once(buy_course, time_delta, chat_id=update.effective_chat.id, data=update)
    
    if update.effective_message.text == "–•–û–ß–£ –ù–ê –ü–†–û–ì–†–ê–ú–ú–£!":
        async with aiosqlite.connect('db.sqlite3') as db:
            await db.execute('''UPDATE clients SET status = ? WHERE id = ?''', (2, update.effective_user.id))
            await db.commit()

        return await payment_course(update, context)
    
    if update.effective_message.text == "–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é –æ–±—É—á–µ–Ω–∏—è":
        time_delta = datetime.timedelta(seconds=5)
        context.job_queue.run_once(progrev_after_course, time_delta, chat_id=update.effective_user.id, data=update)

    if update.effective_message.text == "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ –≤ –ü—Ä–æ–≥—Ä–∞–º–º–µ!":
        async with aiosqlite.connect('db.sqlite3') as db:
            await db.execute('''UPDATE clients SET status = ? WHERE id = ?''', (2, update.effective_user.id))
            await db.commit()
        return await payment_course(update, context)
    
    if update.effective_message.text == "–•–æ—á—É –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å!":
        async with aiosqlite.connect('db.sqlite3') as db:
            await db.execute('''UPDATE clients SET status = ? WHERE id = ?''', (1, update.effective_user.id))
            await db.commit()
        return await payment_gaid(update, context)


async def progrev_func_gaidj(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("telegbot/courses/Example.pdf", "rb") as course:
        await context.bot.send_document(chat_id=update.message.chat.id, document=course)
    time_delta = datetime.timedelta(seconds=5)
    progrev_started = context.user_data.get("progrev_started")
    context.job_queue.run_once(sendmesage, time_delta, chat_id=update.effective_user.id, data=progrev_started)
    context.user_data["progrev_started"] = True

async def progrev_func_gaids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("telegbot/courses/Example.pdf", "rb") as course:
        await context.bot.send_document(chat_id=update.message.chat.id, document=course)
    time_delta = datetime.timedelta(seconds=5)
    progrev_started = context.user_data.get("progrev_started")
    context.job_queue.run_once(sendmesage, time_delta, chat_id=update.effective_user.id, data=progrev_started)
    context.user_data["progrev_started"] = True

async def progrev_func_gaida(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("telegbot/courses/Example.pdf", "rb") as course:
        await context.bot.send_document(chat_id=update.message.chat.id, document=course)
    time_delta = datetime.timedelta(seconds=5)
    progrev_started = context.user_data.get("progrev_started")
    context.job_queue.run_once(sendmesage, time_delta, chat_id=update.effective_user.id, data=progrev_started)
    context.user_data["progrev_started"] = True

#—Ñ–∏—á–∞
    
async def sendmesage(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    if job.data:
        return

    reply_keyb = [["–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å!"],["–Ø –µ—â—ë –Ω–µ —Å–æ–∑—Ä–µ–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è"]]
    await context.bot.send_message(
        chat_id=job.chat_id,
        text="""90% –ª—é–¥–µ–π –∏–≥—Ä–∞—é—Ç —Å–≤–æ—é —Ä–æ–ª—å –Ω–∞ —Å—Ü–µ–Ω–µ –ñ–∏–∑–Ω–∏. –ö–∞–∫ –≤—Å—ë –∏–∑–º–µ–Ω–∏—Ç—å? 

–í—ã —É–∂–µ —Å–∫–∞—á–∞–ª–∏ —Ç–æ—Ç —á–µ–∫-–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–æ–∫ –∫ –≤–∞–º. –ê –≤–æ–∑–º–æ–∂–Ω–æ, –∏ –≤—Å–µ 3. üòá

–ö–∞–∫ –≤–∞–º –∂–∏–≤–µ—Ç—Å—è –≤ —Ç–æ–π —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –¥–ª—è —Å–µ–±—è –≤—ã–±—Ä–∞–ª–∏? –ù–∞–≤–µ—Ä–Ω—è–∫–∞ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ. ‚§µÔ∏è

–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ–≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏—è—Ö –∏ –≤—ã—Ç–µ—Å–Ω–µ–Ω–Ω—ã—Ö —á—É–≤—Å—Ç–≤–∞—Ö:

    ‚ö†Ô∏è –ñ–µ—Ä—Ç–≤–∞ –≤—ã—Ç–µ—Å–Ω—è–µ—Ç –∞–≥—Ä–µ—Å—Å–∏—é. 
    ‚ö†Ô∏è –°–ø–∞—Å–∞—Ç–µ–ª—å –≤—ã—Ç–µ—Å–Ω—è–µ—Ç –±–µ—Å—Å–∏–ª–∏–µ. 
    ‚ö†Ô∏è –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ç–µ—Å–Ω—è–µ—Ç —Å–ª–∞–±–æ—Å—Ç—å.

–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!

–ö–æ–≥–¥–∞ –≤—ã –æ—Å–æ–∑–Ω–∞–ª–∏ —Å–≤–æ–∏ —Ä–æ–ª–∏ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞. 

–ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –£–≤–µ—Ä–µ–Ω–Ω—ã–º, –°–ø–∞—Å–∞—Ç–µ–ª—å ‚Äî –ó–∞–±–æ—Ç–ª–∏–≤—ã–º, –∞ –ñ–µ—Ä—Ç–≤–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ –ë–µ–∑–∑–∞—â–∏—Ç–Ω–æ–≥–æ. üî•üî•üî•

–ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –º–µ—Ö–∞–Ω–∏–∑–º–∞–º, —á–µ–ª–æ–≤–µ–∫ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–µ–≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Å—Ç—Ä–æ–∏—Ç –Ω–æ–≤—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã.

–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–¥—É—Ö –∏ –∑–¥–æ—Ä–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã. ‚ù§Ô∏è

–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ç–æ —Ç—ã, –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è —Å–µ–±–µ, —á—Ç–æ —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–∫—Ä—ã—Ç–∏–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ‚Äî –∫–ª–∞—Å—Å–Ω—ã–π —à–∞–≥ –∫ —Å–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –∏ –∫ –≤—ã—Ö–æ–¥—É –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–Ω–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏–π –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π. üî•üî•üî•

–î–∞–≤–∞–π—Ç–µ –≤—ã–π–¥–µ–º –∏–∑ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.

–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∑–∞–±–∏—Ä–∞–π—Ç–µ –º–æ–π –≥–∞–π–¥-–ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –≤—ã—Ö–æ–¥—É –∏–∑ –≤–∞—à–µ–π –†–æ–ª–∏ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π. üó∫Ô∏è

–ü—Ä–æ—Å—Ç–æ –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üëá

–î–ª—è –Ω–∞—à–µ–≥–æ —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–µ–º–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ—Ç–¥–∞—Ç—å –∑–∞ –Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—É–º–º—É (—Ü–µ–Ω–∞ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∞ –∫–æ—Ñ–µ). ü§ó
                                    """,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyb, resize_keyboard=True, one_time_keyboard=True
        ),
    )



async def payment_gaid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    title = "–ö—É—Ä—Å"
    description = "Payment Example"
    # select a payload just for you to recognize its the donation from your bot
    payload = "Custom-Payload"
    # In order to get a provider_token see https://core.telegram.org/bots/payments#getting-a-token
    currency = "RUB"
    # price in dollars
    price = 100
    # price * 100 so as to include 2 decimal points
    prices = [LabeledPrice("Test", price * 100)]

    # optionally pass need_name=True, need_phone_number=True,
    # need_email=True, need_shipping_address=True, is_flexible=True
    await context.bot.send_invoice(
        chat_id,
        title,
        description,
        payload,
        PAYMENT_PROVIDER_TOKEN,
        currency,
        prices,
        need_email=True,
        send_email_to_provider=True,
        provider_data={
            "receipt": {
                "items": [
                    {
                        "description": title,
                        "quantity": "1.00",
                        "amount": {"value": str(price) + ".00", "currency": "RUB"},
                        "vat_code": 1,
                    },
                ]
            }
        },
    )
async def payment_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    title = "Payment Example"
    description = "Payment Example using python-telegram-bot"
    # select a payload just for you to recognize its the donation from your bot
    payload = "Custom-Payload"
    # In order to get a provider_token see https://core.telegram.org/bots/payments#getting-a-token
    currency = "RUB"
    # price in dollars
    price = 200
    # price * 100 so as to include 2 decimal points
    prices = [LabeledPrice("Test", price * 100)]

    # optionally pass need_name=True, need_phone_number=True,
    # need_email=True, need_shipping_address=True, is_flexible=True
    await context.bot.send_invoice(
        chat_id,
        title,
        description,
        payload,
        PAYMENT_PROVIDER_TOKEN,
        currency,
        prices,
        need_email=True,
        send_email_to_provider=True,
        provider_data={
            "receipt": {
                "items": [
                    {
                        "description": title,
                        "quantity": "1.00",
                        "amount": {"value": str(price) + ".00", "currency": "RUB"},
                        "vat_code": 1,
                    },
                ]
            }
        },
    )


async def precheckout_callback(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Answers the PreQecheckoutQuery"""
    query = update.pre_checkout_query
    if query.invoice_payload != "Custom-Payload":
        await query.answer(ok=False, error_message="Something went wrong...")
    else:
        await query.answer(ok=True)


async def successful_payment_callback(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Confirms the successful payment."""
    async with aiosqlite.connect('db.sqlite3') as db:
        async with db.execute('''SELECT status FROM clients WHERE id = ?''',(update.effective_user.id,)) as cursor:
            async for answer in cursor:
                if answer[0] == 1:
                    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
                    with open("telegbot/courses/fae.pdf", "rb") as fae:
                        await context.bot.send_document(
                            chat_id=update.effective_chat.id,
                            document=fae
                            )
                    time_delta = datetime.timedelta(seconds=1)
                    context.job_queue.run_once(buy_course, time_delta, chat_id=update.effective_user.id, data=update)
                elif answer[0] == 2:
                    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="https://t.me/buddy_san_bot"
                    )


async def buy_course(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    replay_keyboard = [["–•–û–ß–£ –ù–ê –ü–†–û–ì–†–ê–ú–ú–£!"],["–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é –æ–±—É—á–µ–Ω–∏—è"]]
    await context.bot.send_message(
        chat_id=job.chat_id,
        text="""–õ—É—á—à–µ–µ, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Å–µ–±—è ‚Äî —ç—Ç–æ –Ω–∞—á–∞—Ç—å –ø–æ—Å—Ç—É–ø–∞—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π!

–ú–æ–∂–Ω–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∏—Å–∫–∞—Ç—å —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è —Å–≤–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∏–ª–∏ —á–∏—Ç–∞—Ç—å 100500 –∫–Ω–∏–≥ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. ü´£

–ù–æ —ç—Ç–æ –Ω–µ –¥–∞—Å—Ç —Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∂–¥–µ—Ç–µ. –í–µ–¥—å –∫–∞–∂–¥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞. 

–ù–µ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞!

–•–æ—Ç–∏—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–ª–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø—É—Å—Ç—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?

–ó–¥–µ—Å—å –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, —É–º–µ—Ç—å –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –¥—Ä—É–≥–æ–≥–æ. 

–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ –ø—Ä–æ—à–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞ —Å –ø–æ–º–æ—â—å—é –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è —É–∑–Ω–∞–ª–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞–≤—Å–µ–≥–¥–∞ —É–±—Ä–∞—Ç—å –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ –∂–∏–∑–Ω–∏.

–í –ø–æ–ª–Ω–æ–π –ü—Ä–æ–≥—Ä–∞–º–º–µ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ. 

–£ –≤–∞—Å –±—É–¥—É—Ç:  

    ‚úÖ –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤—ã—Ö–æ–¥—É –∏–∑ —Å–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π 
    ‚úÖ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏—è 
    ‚úÖ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ 
    ‚úÖ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
    ‚úÖ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã

‚è≥ –î–æ—Å—Ç—É–ø –∫ –ü—Ä–æ–≥—Ä–∞–º–º–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å = –æ–¥–Ω–æ–º—É –ø–æ—Ö–æ–¥—É –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –Ω–∞ 4 –¥–Ω—è! üòç

–ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ü—Ä–æ–≥—Ä–∞–º–º–µ ¬´Seven Day¬ª. ‚ù§Ô∏è

                """,
        reply_markup=ReplyKeyboardMarkup(
            replay_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        ),
    )
    return CHOOSE_OPTION

async def progrev_after_gaid( context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    replay_keyboard = [["–•–æ—á—É –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å!"],["–Ø –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ"]]
    await context.bot.send_message(
        chat_id=job.chat_id,
        text=f"""{job.data.effective_user.full_name}, –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–±—Ä–∞–ª–∏ —Å–≤–æ–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –≤—ã—Ö–æ–¥—É –∏–∑ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? –ü–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! ‚ö†Ô∏è

–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî –ø–µ—Ä–≤—ã–µ –∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —à–∞–≥–∏ –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.

–ö–∞–∫ –∏—Ö —Å–¥–µ–ª–∞—Ç—å? –í–∞–º –ø–æ–º–æ–∂–µ—Ç —ç—Ç–æ—Ç –≥–∞–π–¥. 

‚ù§Ô∏è‚Äçüî• –ù–µ —É–ø—É—Å–∫–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! 
                """,
            reply_markup=ReplyKeyboardMarkup(
            replay_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        ),
    )
    
    return CHOOSE_OPTION

async def progrev_after_course( context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    replay_keyboard = [["–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ –≤ –ü—Ä–æ–≥—Ä–∞–º–º–µ!"]]
    await context.bot.send_message(
        chat_id=job.chat_id,
        text=f"""{job.data.effective_user.full_name}, –ü–õ–ê–ù –ü–û –í–´–•–û–î–£ –ò–ó –°–ò–¢–£–ê–¶–ò–ò –ó–î–ï–°–¨!

–í –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–æ–≥—É—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –∫–æ–ª–ª–µ–≥–∏ –ø–æ —Ä–∞–±–æ—Ç–µ, —Å—É–ø—Ä—É–≥–∏, —Ä–æ–¥–∏—Ç–µ–ª–∏ –∏ –¥–∞–∂–µ –¥–µ—Ç–∏. 

–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤ —Ç–∞–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:

    ‚ö†Ô∏è –≤–æ–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤–∏–Ω—ã –∑–∞ —Ç–æ, —á—Ç–æ –≤–∞—à–∞ –∂–∏–∑–Ω—å –ø—Ä–æ—Ç–µ–∫–∞–µ—Ç –Ω–µ —Ç–∞–∫, –∫–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã;
    ‚ö†Ô∏è –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏, –∫–æ–≥–¥–∞ —É –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ; —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ, —á—Ç–æ–±—ã —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É;
    ‚ö†Ô∏è –≤—ã –±–æ–∏—Ç–µ—Å—å –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –∏ –≤ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–Ω—è—Ç—å –µ–µ —Å—É—Ç—å –∏ –ø—É—Ç–∏ –µ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ —Å –¥—Ä—É–≥–∏–º–∏ –∏–∑ —á—É–≤—Å—Ç–≤–∞ –æ–ø–∞—Å–µ–Ω–∏—è –µ–≥–æ –æ–±–∏–¥–µ—Ç—å –∏ —Ä–∞—Å—Å—Ç—Ä–æ–∏—Ç—å;
    ‚ö†Ô∏è –±–ª–∏–∑–∫–∏–π, —Å—Ç—Ä–∞–¥–∞—é—â–∏–π –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –º–æ–∂–µ—Ç –æ–±–≤–∏–Ω—è—Ç—å –≤–∞—Å –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –∞ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å, –¥—É–º–∞—è, —á—Ç–æ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞—Å–ª—É–∂–∏—Ç—å –µ–≥–æ –ª—é–±–æ–≤—å, –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤–Ω–∏–º–∞–Ω–∏–µ;
    ‚ö†Ô∏è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–º–æ—â–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –¥—É–º–∞—Ç—å, —á—Ç–æ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —Ö–æ—Ä–æ—à–∏–º –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.

–®–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Å–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±—è, –º—ã —Å–¥–µ–ª–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞ –ü—Ä–æ–≥—Ä–∞–º–º–µ ¬´Seven Day¬ª:

    ‚úÖ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ
    ‚úÖ —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π –∏ –æ—Ü–µ–Ω–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —ç–º–æ—Ü–∏–π
    ‚úÖ –∑–∞—â–∏—Ç–∞ —Å–≤–æ–∏—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
    ‚úÖ –∏–∑–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
    ‚úÖ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ
    ‚úÖ –æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
–ù–∞ –Ω–µ–π –≤—ã —É–∑–Ω–∞–µ—Ç–µ –∫–∞–∫:

    üìç –°—Ç–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–∞–º–æ–∏–∑–æ–ª—è—Ü–∏—é –æ—Ç –æ–±—â–µ—Å—Ç–≤–∞.
    üìç –ù–∞—É—á–∏—Ç—å—Å—è –∏–∑–±–µ–≥–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ —Å–µ–º—å–µ –∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ ¬´–≥–∞—Å–∏—Ç—å¬ª –∏—Ö –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.
    üìç –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∞ –¥—Ä—É–≥–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Ä—É—Å–ª–æ.
    üìç –ñ–∏—Ç—å —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É—è—Å—å, –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏, –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏.
    üìç –°–±—Ä–æ—Å–∏—Ç—å —Å —Å–µ–±—è –±—Ä–µ–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∂–∏–∑–Ω—å –î—Ä—É–≥–æ–≥–æ –∏ –Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –∑–∞ —Å–µ–±—è –∏ —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
    üìç –û–±—Ä–µ—Å—Ç–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–µ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–º—É, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º—É –º—ã—à–ª–µ–Ω–∏—é.
    üìç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ –æ–±–µ—Ä–µ–≥–∞—Ç—å –ª–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ø –≤ –ª—é–±—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏ –∏ —Å–æ—Ü–∏—É–º–æ–º.

üî• –≤—Å–µ –≤–∏–¥–µ–æ-—É—Ä–æ–∫–∏ –≤ –∑–∞–ø–∏—Å–∏
üî• –¥–æ—Å—Ç—É–ø –∫ –ü—Ä–æ–≥—Ä–∞–º–º–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
üî• –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã 6 –º–µ—Å—è—Ü–µ–≤ 

–ë—É–¥—å –≤ –∏—Ö —á–∏—Å–ª–µ, –ø—Ä–∏–Ω—è–≤ –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚¨áÔ∏è


                """,
            reply_markup=ReplyKeyboardMarkup(
            replay_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        ),
    )
    return CHOOSE_OPTION

def main():

    application = (
        ApplicationBuilder()
        .token("6936836289:AAG7p5_f6MnipjOXiKDJfg2k7-YZPdt1SZs")
        .build()
    )
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={CHOOSE_OPTION: [MessageHandler(filters.TEXT, choose_option)]
                },
        fallbacks=[],
    )

    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))

    application.add_handler(
        MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback)
    )

    application.add_handler(conv_handler)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(create_bd(loop))
    main()
